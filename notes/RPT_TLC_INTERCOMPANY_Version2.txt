CREATE OR REPLACE PROCEDURE RPT_TLC_INTERCOMPANY()
LANGUAGE SQL
SPECIFIC SP_RPT_TLC_INTERCOMPANY
DYNAMIC RESULT SETS 1
BEGIN
/*
Date: May 20, 2025
Version 2

Reason for Creating This Procedure

To optimize and streamline the data retrieval for the Intercompany Crystal Report by encapsulating its complex joins and calculations in a single database‚Äêside routine, thereby reducing query overhead, minimizing network traffic, and significantly improving report generation performance.
*/


  DECLARE C_RESULT_SET CURSOR WITH RETURN TO CALLER FOR
 
SELECT
  T.BILL_NUMBER, 
  DATE(T.ACTUAL_DELIVERY) ACTUAL_DELIVERY,
  R.TRIP_NUMBER,
  R.ORIG_ZONE_DESC || CASE WHEN TZF.IS_TERMINAL = 'True' THEN ', ' || TZF.PROVINCE ELSE '' END Trip_From,
  R.DEST_ZONE_DESC || CASE WHEN TZT.IS_TERMINAL = 'True' THEN ', ' || TZT.PROVINCE ELSE '' END Trip_To,
  L.LS_LEG_SEQ LEG,
  L.LEGO_ZONE_DESC || CASE WHEN LZF.IS_TERMINAL = 'True' THEN ', ' || LZF.PROVINCE ELSE '' END LEG_FROM,
  L.LEGD_ZONE_DESC || CASE WHEN LZT.IS_TERMINAL = 'True' THEN ', ' || LZT.PROVINCE ELSE '' END LEG_TO,
  L.LS_DRIVER DRIVER_ID,
  L.LS_POWER_UNIT,
  L.LS_INTERLINER CARRIER_ID,  
  NVL(ROUND(O.CARRIER_PAY * CASE WHEN C.TOTAL_CARRIER_MILES <> 0 THEN L.LS_LEG_DIST / C.TOTAL_CARRIER_MILES ELSE 0 END, 2), 0) CARRIER_PAY,
  T.CHARGES, 
  T.XCHARGES,
  T.TAX_1,
  T.TAX_2,
  T.TOTAL_CHARGES,
  L.LS_LEG_DIST MILES,
  M.TOTAL_FB_MILES,
  ROUND(CASE WHEN M.TOTAL_FB_MILES <> 0 THEN L.LS_LEG_DIST / M.TOTAL_FB_MILES ELSE 0 END, 2) SHARE,
  T.ORIGCITY SHIPPER_CITY,
  T.ORIGPROV SHIPPER_PROV,
  T.DESTCITY CONSIGNEE_CITY,
  T.DESTPROV CONSIGNEE_PROV,
  T.REQUESTED_EQUIPMEN SERVICE_LEVEL,
  T.DISTANCE BILLED_MILES,
  A.CHARGES ADDITIONAL_CHARGES, 
  A.XCHARGES ADDITIONAL_XCHARGES,
  A.TAX_1 ADDITIONAL_TAX_1,
  A.TAX_2 ADDITIONAL_TAX_2,
  A.TOTAL_CHARGES ADDITIONAL_TOTAL_CHARGES,
  T.PALLETS SKIDS,
  P.SKID_UNITS
FROM TRIP R
JOIN LEGSUM L ON L.LS_TRIP_NUMBER = R.TRIP_NUMBER
JOIN ILEGDTL I ON I.ILD_LEG_ID = L.LS_LEG_ID
JOIN TLORDER T ON T.DETAIL_LINE_ID = I.ILD_FB_ID
JOIN (SELECT I1.ILD_FB_ID, SUM(LS_LEG_DIST) TOTAL_FB_MILES FROM LEGSUM L1 JOIN ILEGDTL I1 ON I1.ILD_LEG_ID = L1.LS_LEG_ID WHERE I1.ILD_RES_TYPE = 'F' GROUP BY I1.ILD_FB_ID) M ON M.ILD_FB_ID = T.DETAIL_LINE_ID
LEFT JOIN (SELECT LS_TRIP_NUMBER, LS_INTERLINER, SUM(LS_LEG_DIST) TOTAL_CARRIER_MILES FROM LEGSUM GROUP BY LS_TRIP_NUMBER, LS_INTERLINER) C ON C.LS_TRIP_NUMBER = L.LS_TRIP_NUMBER AND C.LS_INTERLINER = L.LS_INTERLINER
LEFT JOIN (SELECT DETAIL_LINE_ID, INTERLINER_ID, SUM(CASE WHEN INTERFACE_STATUS = 'I' THEN ADJUSTED_AMOUNT ELSE AMOUNT END) CARRIER_PAY FROM ORDER_INTERLINER GROUP BY DETAIL_LINE_ID, INTERLINER_ID) O ON O.DETAIL_LINE_ID = T.DETAIL_LINE_ID AND O.INTERLINER_ID = L.LS_INTERLINER
LEFT JOIN (SELECT T1.BILL_NUMBER, SUM(T2.CHARGES) CHARGES, SUM(T2.XCHARGES) XCHARGES, SUM(T2.TAX_1) TAX_1, SUM(T2.TAX_2) TAX_2, SUM(T2.TOTAL_CHARGES) TOTAL_CHARGES  FROM TLORDER T1 JOIN TLORDER T2 ON T2.COPY_DLID = T1.DETAIL_LINE_ID WHERE NVL(T2.INTERFACE_STATUS_F, 0) <> -1 AND T2.BILL_NUMBER LIKE '%.%' GROUP BY T1.BILL_NUMBER) A ON A.BILL_NUMBER = T.BILL_NUMBER
LEFT JOIN (SELECT ORDER_ID, CAST(LISTAGG(DISTINCT PALLET_UNITS) AS VARCHAR(20)) SKID_UNITS FROM TLDTL GROUP BY ORDER_ID) P ON P.ORDER_ID = T.DETAIL_LINE_ID


JOIN ZONE TZF ON TZF.ZONE_ID = R.ORIGIN_ZONE
JOIN ZONE TZT ON TZT.ZONE_ID = R.DESTINATION_ZONE
JOIN ZONE LZF ON LZF.ZONE_ID = L.LS_FROM_ZONE
JOIN ZONE LZT ON LZT.ZONE_ID = L.LS_TO_ZONE

JOIN 
    (
      SELECT I2.ILD_FB_ID, COUNT(DISTINCT I1.ILD_RES_TYPE) RES_COUNT
      FROM ILEGDTL I1
      JOIN ILEGDTL I2 ON I2.ILD_LEG_ID = I1.ILD_LEG_ID
      WHERE I1.ILD_RES_TYPE IN ('D', 'I') 
        AND I2.ILD_RES_TYPE IN ('F') 
      GROUP BY I2.ILD_FB_ID
      HAVING COUNT(DISTINCT I1.ILD_RES_TYPE) > 1
    ) S ON S.ILD_FB_ID = T.DETAIL_LINE_ID
WHERE 1 = 1
AND T.EXTRA_STOPS <> 'Child'
AND T.BILL_NUMBER LIKE 'C%'

ORDER BY BILL_NUMBER, TRIP_NUMBER, LEG;

  OPEN C_RESULT_SET;

END;